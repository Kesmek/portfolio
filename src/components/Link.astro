---
import type { Polymorphic } from "astro/types";

type Props<Tag extends "a" | "button"> = Polymorphic<{ as: Tag }> & {
  variant?: "gradient" | "default";
};

const { as: Tag, variant, ...props } = Astro.props;
const variantClass = `${variant === "gradient" ? "gradient" : ""}`;
const className = props.class;
---

<Tag {...props} class:list={["link", variantClass, className]}>
  <slot name="icon" />
  <slot />
</Tag>

<style>
  @layer components {
    .link {
      display: flex;
      gap: var(--spacing-4);
      max-inline-size: var(--sizing-120);
      min-inline-size: var(--sizing-88);
      justify-content: center;
      padding-inline: var(--spacing-12);
      padding-block: var(--spacing-8);
      border-radius: var(--border-radius-full);
      background-color: var(--theme-color-base);
      border: solid var(--border-width-thin) var(--theme-border-color);
      transition: all 250ms ease;
      text-align: center;
      font-weight: bold;
      color: var(--theme-text-color);
      text-wrap: nowrap;

      &:hover,
      &:focus-visible {
        border-color: var(--theme-border-color-hover);
        background-color: var(--theme-color-hover);
        cursor: pointer;
        scale: 1.05;
      }

      &:active {
        scale: 1.03;
        background-color: var(--theme-color-active);
      }
    }

    .gradient {
      background: linear-gradient(
        in oklab,
        var(--theme-color-background),
        var(--theme-color-hover)
      );

      &:hover,
      &:focus-visible {
        box-shadow: 0px 0px 5px 0px var(--theme-border-color-hover);
      }

      &:active {
        background: linear-gradient(
          in oklab,
          var(--theme-color-base),
          var(--theme-color-active)
        );
      }
    }
  }
</style>
